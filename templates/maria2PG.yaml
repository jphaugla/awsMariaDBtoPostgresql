# AWS Database Migration Workshop
# Last Updated on Sept 03, 2020 by hoomanh@

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for AWS Database Migration Workshop.

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      -
        Label:
          default: "Database Migration Workshop Lab Environment"
        Parameters:
          - LabType
      - 
        Label: 
          default: "Amazon EC2 Configuration"
        Parameters:
          - EC2ServerInstanceType
          - KeyName
      - 
        Label: 
          default: "Target Amazon RDS Database Configuration"
        Parameters:
          - RDSInstanceType           
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - VpcCIDR
          - Subnet1CIDR
          - Subnet2CIDR
          - Subnet3CIDR 

Mappings:
  RegionMap:
    us-east-1: # Virginia
      "EC2AMI" : "ami-045d48ee4dd4f5210"  # Updated Feb 03, 2020
    us-east-2: # Ohio
      "EC2AMI" : "ami-021e119b2b955586a" # Updated Feb 03, 2020
    us-west-2: # Oregon
      "EC2AMI" : "ami-04f6666670bad6990" # Updated Feb 03, 2020
    ap-south-1: # Mumbai
      "EC2AMI" : "ami-01ef7145a99919201" # Updated Feb 03, 2020
    ap-northeast-2: # Seoul
      "EC2AMI" : "ami-0f84e34359512e516" # Updated Feb 03, 2020
    ap-southeast-1: # Singapore
      "EC2AMI" : "ami-08c6f23674b803e33" # Updated Feb 03, 2020
    ap-southeast-2: # Sydney 
      "EC2AMI" : "ami-0327c19efba4c1cc7" # Updated Feb 03, 2020
    ap-northeast-1: # Tokyo
      "EC2AMI" : "ami-071fb5f94e15b8af8" # Updated Feb 03, 2020
    eu-central-1: # Frankfurt
      "EC2AMI" : "ami-009ce26e2fc8621cd" # Updated Feb 03, 2020
    eu-west-1: # Ireland
      "EC2AMI" : "ami-075c511465e103a00" # Updated Feb 03, 2020
    eu-west-2: # London
      "EC2AMI" : "ami-0738996a89d25ae41" # Updated Feb 03, 2020
    eu-west-3: # Paris - 
      "EC2AMI" : "ami-0a9211e0416c5d9e7" # Updated Feb 03, 2020
    eu-north-1: # Stockholm 
      "EC2AMI" : "ami-0974f8de192e11d12" # Updated Feb 03, 2020
    sa-east-1: # Sao Paulo 
      "EC2AMI" : "ami-0c6dc49bd206d2bcf" # Updated Feb 03, 2020

Parameters:
  LabType: 
    Description: 'Select your Database Migration lab:'
    Type: String
    AllowedValues: 
      - 'MariaDB to Amazon Aurora (PostgreSQL)'
      - 'MariaDB to Amazon RDS (PostgreSQL)'
      - 'MariaDB to Amazon S3'
    ConstraintDescription: Must select a lab environment from the options.
  IPCidrToAllowTraffic:
    Description: An IP address from where to allow ssh to client instance.
    Type: String
    Default: X.X.X.X/32
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable RDP access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  VpcCIDR:
    Description: Enter the VPC CIDR range in the form x.x.x.x/16
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.20.0.0/16
  Subnet1CIDR:
    Description: Enter the Subnet 1 CIDR range in the form x.x.x.x/22
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.1.0/24
  Subnet2CIDR:
    Description: Enter the Subnet 2 CIDR range in the form x.x.x.x/22
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.2.0/24
  Subnet3CIDR:
    Description: Enter the Subnet 3 CIDR range in the form x.x.x.x/22
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.20.3.0/24
  EC2ServerInstanceType:
    Description: Amazon EC2 Instance Type
    Type: String
    Default: m5a.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  ClientEC2InstanceType:
    Description: Amazon EC2 Linux Instance Type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
  RDSInstanceType:
    Description: Amazon RDS Target Instance Type
    Type: String
    Default: db.r5.xlarge
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.12xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
    ConstraintDescription: Must be a valid Amazon RDS instance type.
  MariaInstanceType:
    Description: Amazon RDS MariaDB Source Instance Type
    Type: String
    Default: db.r5.xlarge
    AllowedValues:
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.12xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
    ConstraintDescription: Must be a valid Amazon RDS instance type.
  ReplicationInstance:
    Default: dms.t3.medium
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
      - dms.t2.medium
      - dms.t3.medium
      - dms.t2.large
      - dms.c4.large
      - dms.c4.xlarge
      - dms.c4.2xlarge
      - dms.c4.4xlarge
    Description: The instance type to use for the replication instance.
    Type: String

  ImageId:
    Description: Image ID for client EC2 instance. Do not change this parameter.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  CreateDMSComponents:
    Description: If true, create the DMS instance, DMS endpoints, and the DMS task
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Must be a valid EC2 instance type. 

Conditions: 
  Create-MariaDB-to-AuroraPostgreSQL-Environment: !Equals [ !Ref LabType, 'MariaDB to Amazon Aurora (PostgreSQL)' ]
  Create-MariaDB-to-RDSPostgreSQL-Environment: !Equals [ !Ref LabType, 'MariaDB to Amazon RDS (PostgreSQL)' ]
  Create-MariaDB-to-S3-Environment: !Equals [ !Ref LabType, 'DB2 to Amazon S3']
  Create-DMS-Environment: !Equals [ !Ref CreateDMSComponents, true ]

Resources:
  DmsVpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 
        Ref: VpcCIDR
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - DmsVpc

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: 
        Ref: Subnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet1
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: 
        Ref: Subnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet2
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DmsVpc
      CidrBlock: 
        Ref: Subnet3CIDR
      AvailabilityZone: !Select [2, !GetAZs ]
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - Subnet3
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the DMS Lab 
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DmsVpc
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DmsVpc
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet3
      RouteTableId: !Ref RouteTable
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2ServerInstanceType
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - EC2Instance
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          DeleteOnTermination: 'true'
          Iops: '2000'
          VolumeSize: '250'
          VolumeType: io1
      ImageId: 
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - EC2AMI
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: 0
        SubnetId: !Ref Subnet2
        GroupSet:
        - Ref: InstanceSecurityGroup

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - InstanceSecurityGroup
      GroupDescription: Enable RDP access via port 3389
      VpcId: !Ref DmsVpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref IPCidrToAllowTraffic
        Description: Allows access to single client IP

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - RDSSecurityGroup
      VpcId: !Ref DmsVpc
      GroupDescription: Amazon Aurora RDS Security Group.
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5432'
        ToPort: '5432'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (PostgreSQL) Access
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: !Ref VpcCIDR
        Description: Allows Amazon RDS Aurora (MySQL) Access
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: !Ref VpcCIDR
        Description: Allows Microsoft SQL Server Access
      - IpProtocol: tcp
        FromPort: '1521'
        ToPort: '1521'
        CidrIp: !Ref VpcCIDR
        Description: Allows Oracle Access

  AuroraPostgresqlCluster:
    Condition: Create-MariaDB-to-AuroraPostgreSQL-Environment
    Type: AWS::RDS::DBCluster
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      Engine: aurora-postgresql
      EngineVersion: '11.9'
      DatabaseName: 'AuroraDB'
      DBClusterParameterGroupName: default.aurora-postgresql11
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
      Port: '5432'
      BackupRetentionPeriod: '7'
    DependsOn: RDSSecurityGroup

  AuroraPostgresqlParameterGroup:
    Condition: Create-MariaDB-to-AuroraPostgreSQL-Environment
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlParameterGroup
      Description: Aurora PostgreSQL DBParameterGroup
      Family: aurora-postgresql11
      Parameters:
        shared_preload_libraries: pg_stat_statements

  AuroraPostgresqlInstance:
    Condition: Create-MariaDB-to-AuroraPostgreSQL-Environment
    Type: AWS::RDS::DBInstance
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - AuroraPostgresqlInstance
      DBClusterIdentifier:
        Ref: AuroraPostgresqlCluster
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - AuroraPostgreSQLInstance
      Engine: aurora-postgresql
      EngineVersion: '11.9'
      DBParameterGroupName:
        Ref: AuroraPostgresqlParameterGroup
      DBClusterIdentifier:
        Ref: AuroraPostgresqlCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      AutoMinorVersionUpgrade: 'true'
      CopyTagsToSnapshot: 'true'
      DBInstanceClass: !Ref RDSInstanceType
      PubliclyAccessible: 'false'

  MariaParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MariaParameterGroup
      Description: RDS MariaDB DBParameterGroup
      Family: mariadb10.4
      Parameters:
        log_bin_trust_function_creators: 1

  MariaParameterGroup105:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - MariaParameterGroup
      Description: RDS MariaDB DBParameterGroup
      Family: mariadb10.5
      Parameters:
        log_bin_trust_function_creators: 1
        binlog_format: 'ROW'
        binlog_checksum: 'NONE'

  MariaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: 'true'
      DBInstanceClass: !Ref MariaInstanceType
      Engine: mariadb
      DBName: MariaDB
      DBParameterGroupName:
        Ref: MariaParameterGroup105
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - MariaDB
      EngineVersion: '10.5.8'
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
    DeletionPolicy: Snapshot
    DependsOn:
      - MariaParameterGroup
      - MariaParameterGroup105
      - RDSSecurityGroup
      - DBSubnetGroup

  RDSPostGresql:
    Condition: Create-MariaDB-to-RDSPostgreSQL-Environment
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      AllowMajorVersionUpgrade: 'true'
      DBInstanceClass: !Ref RDSInstanceType
      Engine: postgres
      DBName: postgres
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      DBInstanceIdentifier:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - RDSPostGresql
      EngineVersion: '12.5'
      MasterUsername: 'dbmaster'
      MasterUserPassword: 'dbmaster123'
    DeletionPolicy: Snapshot
    DependsOn:
      - RDSSecurityGroup
      - DBSubnetGroup

  testkinesisstream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: testkinesisstream
      ShardCount: 2

      
  DMSExecutionRole:
    Condition: Create-DMS-Environment
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DMSservicerole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'kinesis:DescribeStream'
                  - 'kinesis:PutRecord'
                  - 'kinesis:PutRecords'
                Resource: !GetAtt
                  - testkinesisstream
                  - Arn

  DMSReplicationSubnetGroup:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::ReplicationSubnetGroup'
    Properties:
      ReplicationSubnetGroupDescription: 'DMS replication subnet'
      SubnetIds:
      - Ref: Subnet1
      - Ref: Subnet2
      - Ref: Subnet3
    DependsOn:
      - Subnet1
      - Subnet2
      - Subnet3

  DMSReplicationInstance:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::ReplicationInstance'
    DependsOn:
      - DMSCloudwatchRole
      - DMSVpcRole
      - DMSReplicationSubnetGroup
    Properties:
      AllocatedStorage: 100
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      EngineVersion: 3.4.3
      MultiAZ: false
      PubliclyAccessible: false
      ReplicationInstanceClass: !Ref ReplicationInstance
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - InstanceSecurityGroup
        - GroupId


  DMSAuroraEndpoint:
    Condition: Create-DMS-Environment
    Condition: Create-MariaDB-to-AuroraPostgreSQL-Environment
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: aurora-postgresql
      EndpointType: target
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - AuroraPostgresqlCluster
        - Endpoint.Address
      Port: 5432
      DatabaseName: 'AuroraDB'
    DependsOn:
      - AuroraPostgresqlCluster

  DMSRDSEndpoint:
    Condition: Create-DMS-Environment
    Condition: Create-MariaDB-to-RDSPostgreSQL-Environment
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: postgres
      EndpointType: target
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - RDSPostGresql
        - Endpoint.Address
      Port: 5432
      DatabaseName: 'postgres'
    DependsOn:
      - RDSPostGresql

  DMSKinesisEndpoint:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: kinesis
      EndpointType: target
      KinesisSettings: 
         MessageFormat: json
         ServiceAccessRoleArn: !GetAtt
            - DMSExecutionRole
            - Arn
         StreamArn: !GetAtt
            - testkinesisstream
            - Arn 
         #  these did not work so commented out
         # IncludePartitionValue: true
         # PartitionIncludeSchemaTable: true

    DependsOn:
      - testkinesisstream
      - DMSExecutionRole

  DMSMariaEndpoint:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: mariadb
      EndpointType: source
      Username: 'dbmaster'
      Password: 'dbmaster123'
      ServerName: !GetAtt
        - MariaDB
        - Endpoint.Address
      Port: 3306
      DatabaseName: MariaDB
    DependsOn:
      - MariaDB

  DMSVpcRole:
    Condition: Create-DMS-Environment
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: dms-vpc-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole'
      Path: /

  DMSCloudwatchRole:
    Condition: Create-DMS-Environment
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: dms-cloudwatch-logs-role-maria
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole'
      Path: /
      
  DMSTaskMigrationRDS:
    Condition: Create-DMS-Environment
    Condition: Create-MariaDB-to-RDSPostgreSQL-Environment
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DMSMariaEndpoint
      TableMappings: >-
        {"rules":[{"rule-type":"selection","rule-id":"4","rule-name":"4","object-locator":{"schema-name":"%","table-name":"%"},"rule-action":"include","filters":[]}]}
      TargetEndpointArn: !Ref DMSRDSEndpoint
    DependsOn:
      - DMSRDSEndpoint
      - DMSMariaEndpoint
      - DMSReplicationInstance

  DMSTaskMigrationKinesis:
    Condition: Create-DMS-Environment
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DMSMariaEndpoint
      TableMappings: >-
        {"rules":[{"rule-type":"selection","rule-id":"4","rule-name":"4","object-locator":{"schema-name":"%","table-name":"%"},"rule-action":"include","filters":[]}]}
      TargetEndpointArn: !Ref DMSKinesisEndpoint
    DependsOn:
      - DMSKinesisEndpoint
      - DMSMariaEndpoint
      - DMSReplicationInstance

  DMSTaskMigrationAurora:
    Condition: Create-DMS-Environment
    Condition: Create-MariaDB-to-AuroraPostgreSQL-Environment
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DMSMariaEndpoint
      TableMappings: >-
        {"rules":[{"rule-type":"selection","rule-id":"4","rule-name":"4","object-locator":{"schema-name":"%","table-name":"%"},"rule-action":"include","filters":[]}]}
      TargetEndpointArn: !Ref DMSAuroraEndpoint
    DependsOn:
      - DMSAuroraEndpoint
      - DMSMariaEndpoint
      - DMSReplicationInstance

  ClientEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref ClientEC2InstanceType
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - "-"
          - - Ref: AWS::StackName
            - ClientEC2Instance
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: 0
        SubnetId: !Ref Subnet2
        GroupSet:
        - Ref: InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo yum install python3.8 -y
          sudo yum install java-1.8.0-openjdk-devel -y
          sudo yum erase awscli -y
          sudo yum install mysql -y
          sudo yum install postgresql -y
          sudo yum install git maven -y
          cd /home/ec2-user
          echo "export PATH=.local/bin:$PATH" >> .bash_profile
          cd /home/ec2-user
          wget https://bootstrap.pypa.io/get-pip.py
          su -c "python3.8 get-pip.py --user" -s /bin/sh ec2-user
          su -c "/home/ec2-user/.local/bin/pip3 install boto3 --user" -s /bin/sh ec2-user
          su -c "/home/ec2-user/.local/bin/pip3 install awscli --user" -s /bin/sh ec2-user
          wget https://downloads.mysql.com/docs/world.sql.gz
          wget https://downloads.mysql.com/docs/world_x-db.tar.gz
          wget https://downloads.mysql.com/docs/sakila-db.tar.gz
          wget https://downloads.mysql.com/docs/menagerie-db.tar.gz
          git clone https://github.com/datacharmer/test_db.git
          tar -xvzf menagerie-db.tar.gz
          tar -xvzf sakila-db.tar.gz
          gunzip world.sql.gz
          tar -xvzf world_x-db.tar.gz
          echo "[client]" > .my.cnf
          echo "user=dbmaster" >> .my.cnf
          echo "password=dbmaster123" >> .my.cnf
          echo "mysql < sakila-db/sakila-schema.sql" > testDB.sh
          echo "mysql <  sakila-db/sakila-data.sql" >> testDB.sh
          echo "mysql <  world_x-db/world_x.sql" >> testDB.sh
          echo "mysql <  world.sql" >> testDB.sh
          echo "cd test_db" >> testDB.sh
          echo "mysql < employees.sql" >> testDB.sh
          echo "cd ../menagerie-db" >> testDB.sh
          echo "mysql < menagerie.sql" >> testDB.sh
          chmod 755 testDB.sh
          echo "create database menagerie;" > menagerie-db/menagerie.sql
          echo "use menagerie;" >> menagerie-db/menagerie.sql
          echo "SOURCE cr_pet_tbl.sql;" >> menagerie-db/menagerie.sql
          echo "LOAD DATA LOCAL INFILE 'pet.txt' INTO TABLE pet;" >> menagerie-db/menagerie.sql
          echo "SOURCE ins_puff_rec.sql;" >> menagerie-db/menagerie.sql
          echo "SOURCE cr_event_tbl.sql;" >> menagerie-db/menagerie.sql
          echo "LOAD DATA LOCAL INFILE 'event.txt' INTO TABLE pet;" >> menagerie-db/menagerie.sql


    
Outputs:
  SourceEC2PublicDNS:
    Description: Public DNS enpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PublicDnsName
  TargetEC2PrivateDNS:
    Description: Private DNS endpoint for the EC2 instance
    Value:
      Fn::GetAtt:
      - EC2Instance
      - PrivateDnsName
  TargetAuroraPostgreSQLEndpoint:
    Condition: Create-MariaDB-to-AuroraPostgreSQL-Environment
    Description: Target Aurora (PostgreSQL) Database Endpoint
    Value:
      Fn::GetAtt:
      - AuroraPostgresqlCluster
      - Endpoint.Address
  TargetRDSPGEndpoint:
    Condition: Create-MariaDB-to-RDSPostgreSQL-Environment
    Description: Target RDS Postgresql Endpoint
    Value:
      Fn::GetAtt:
      - RDSPostGresql
      - Endpoint.Address
  SourceRDSMariaEndpoint:
    Description: Source RDS MariaDB Endpoint
    Value:
      Fn::GetAtt:
      - MariaDB
      - Endpoint.Address
  TargetKinesisEndpoint:
    Description: Target Kinesis Endpoint
    Value:
      Fn::GetAtt:
      - testkinesisstream
      - Arn
  ClientEC2PublicDNS:
    Description: Client EC2 public dns
    Value:
      Fn::GetAtt:
      - ClientEC2Instance
      - PublicDnsName
  TargetKinesisRole:
    Description: Target Kinesis Role
      - DMSExecutionRole
      - Arn
    Value:
      Fn::GetAtt:
      - DMSExecutionRole
      - Arn

